#include <Logger.h>

Logger *Logger::m_Instance = nullptr;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Return the string (in words) the level of Log level
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *const GetLogLevelString(const Logger::LogLevel_e level) {
    switch (level)     {
    case Logger::LOG_ERROR:
        return (char *)"ERROR ";
        break;

    case Logger::LOG_WARNING:
        return (char *)"WARNING ";
        break;

    case Logger::LOG_INFO:
        return (char *)"INFO ";
        break;

    case Logger::LOG_DEBUG:
        return (char *)"DEBUG ";
        break;

    default:
        std::cout << "GetLogLevelString(), level (" << level << ") is invalid \n";
        break;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Constructor of logger
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger::Logger()
    : m_LogLevel(Logger::LOG_ERROR), m_LogBitMask(0) {
    std::cout << " [LOGGER] Logger::Logger(), Logger Constructor called with level " << m_LogLevel << "(" << GetLogLevelString(m_LogLevel) <<")" << ", Bit Mask " << std::hex << m_LogBitMask << std::endl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Destructor of logger
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger::~Logger() {
    m_Instance = nullptr;
    std::cout << " [LOGGER] Logger::~Logger(), Logger Destructor called " << std::endl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Create new Instance for Logger.
///              If alredy created then return the older Pointer
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger *Logger::GetLoggerInstance() {
    if (nullptr == m_Instance) {
        std::cout << " [LOGGER] Logger::GetLoggerInstance, Creating Logger Instance " << std::endl;
        m_Instance = new Logger;
    }
    return m_Instance;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Delete the created Logger Instance
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger *Logger::ReleaseInstance() {
    if (nullptr != m_Instance) {
        std::cout << " [LOGGER] Logger::ReleaseInstance, Deleting Logger Instance " << std::endl;
        delete m_Instance;
    }
    return m_Instance;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Set the member function of LogLevel
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::SetLogLevel(const LogLevel_e level) {
    if ((LOG_DEBUG <= level) && (LOG_ERROR >= level)) {
        std::cout << " [LOGGER] Logger::SetLogLevel(), Log level Set to " << level << std::endl;
        m_LogLevel = level;
    }
    else {
        std::cout << "[LOGGER : ERROR] : Logger::SetLogLevel(), level " << level << " is out of range { " << LOG_DEBUG << ", " << LOG_ERROR << " }" << std::endl;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Print the log according to log level and bit mask of file
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::LOG(LogLevel_e level, const int mask, const char *fmt, ...) {
    if ((m_LogLevel <= level) && ((m_LogBitMask >> mask) & 0x01)) {
        std::cout << "[ " << GetLogLevelString(level) << " ] ";

        va_list args;
        va_start(args, fmt);
        vprintf(fmt, args);
        va_end(args);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Brief      : Set the member funcion of Log Bit MAsk
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::SetLogBitMask(const int mask) {
    m_LogBitMask = mask;
    std::cout << " [LOGGER] Logger::SetLogBitMask(), Bit Mask set to : " << std::hex << m_LogBitMask << std::endl;
}
